---
AWSTemplateFormatVersion: '2010-09-09'

Description: Core network and IAM resources for M1 Project container service

Mappings:

  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'
      
Parameters:
  
  NATAMI:
    Type: String
    Default: ami-00a9d4a05375b2763
      
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-core-vpc'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      
  # Subnets

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-public1-subnet'
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-public2-subnet'
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-private1-subnet'
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-private2-subnet'
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      
  # Routing

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-igw'
    
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-public-rt'
      VpcId: !Ref 'VPC'
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-fargate-sg'
      GroupName: m1-fargate-sg
      GroupDescription: Access to the Fargate containers from M1 VPC
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
        IpProtocol: -1
  
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-nat-sg'
      GroupName: m1-nat-sg
      GroupDescription: Access to NAT Instances
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !GetAtt FargateContainerSecurityGroup.GroupId
        IpProtocol: -1
        
  # NAT Instances
  
  NATInstanceOne:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-public1-nat-instance'
      ImageId: !Ref NATAMI
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetOne
        AssociatePublicIpAddress: true
        GroupSet: [!Ref NATSecurityGroup]
      SourceDestCheck: false

  NATInstanceTwo:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-public2-nat-instance'
      ImageId: !Ref NATAMI
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetTwo
        AssociatePublicIpAddress: true
        GroupSet: [!Ref NATSecurityGroup]
      SourceDestCheck: false

        
  # Private Routing
  
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-private1-rt'
      VpcId: !Ref 'VPC'
  
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstanceOne
  
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
      
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-private2-rt'
      VpcId: !Ref 'VPC'
  
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstanceTwo
  
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # VPC Endpoint - DynamoDB

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref 'PrivateRouteTableOne'
        - !Ref 'PrivateRouteTableTwo'
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref 'VPC'
      
  # IAM Roles

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-ecs-role'
      RoleName: m1-ecs-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: m1-ecs-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Network Interface actions for awsvpc networking mode
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # ELB
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              # Allow ECS to run tasks that have IAM roles assigned to them
              - 'iam:PassRole'
              # Allow ECS interact with container images
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              # Allow ECS create and push logs to CloudWatch
              - 'logs:DescribeLogStreams'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
            Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-ecs-task-role'
      RoleName: m1-ecs-task-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: m1-ecs-task-policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
              Resource: '*'
            - Effect: Allow
              Action:
                # Allows ECS tasks to interact only with m1-table in DynamoDB
                - 'dynamodb:Scan'
                - 'dynamodb:Query'
                - 'dynamodb:UpdateItem'
                - 'dynamodb:GetItem'
              Resource: 'arn:aws:dynamodb:*:*:table/m1-table*'

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: m1-codepipeline-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: m1-codepipeline-policy
        PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - ecs:*
            - codebuild:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::*
            Effect: Allow
          Version: "2012-10-17"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: m1-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: m1-codebuild-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "codecommit:ListBranches"
            - "codecommit:ListRepositories"
            - "codecommit:BatchGetRepositories"
            - "codecommit:Get*"
            - "codecommit:GitPull"
            Resource:
            - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:m1-repository
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:ListBucket"
            - "ecr:InitiateLayerUpload"
            - "ecr:GetAuthorizationToken"
            Resource: "*"
            
  CoreArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: m1-core-artifacts-cicd-bucket
      
  CoreArtifactsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CoreArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "Whitelisted S3 Get and Put"
          Effect: "Allow"
          Principal:
            AWS:
            - !GetAtt CodeBuildRole.Arn
            - !GetAtt CodePipelineRole.Arn
          Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          - "s3:GetBucketVersioning"
          - "s3:PutObject"
          Resource:
          - !Sub ${CoreArtifactsBucket.Arn}
          - !Sub ${CoreArtifactsBucket.Arn}/*
          
  # CI/CD
          
  CodeCommitRepository:   
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: m1-core-codecommit-repository
      
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: m1-core-codebuild-project
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.5.2
        PrivilegedMode: true
        EnvironmentVariables:
        - Name: AWS_ACCOUNT_ID
          Value: !Ref AWS::AccountId
        - Name: AWS_DEFAULT_REGION
          Value: !Ref AWS::Region
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !Sub https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepository.Name}
        
  CodePipeline: 
    Type: AWS::CodePipeline::Pipeline 
    Properties:
      Name: m1-core-codepipeline-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      
      - Name: Source
        Actions: 
        - Name: SourceAction
          ActionTypeId: 
            Category: Source 
            Owner: AWS 
            Version: 1 
            Provider: CodeCommit 
          OutputArtifacts: 
          - Name: m1-core-source-artifact 
          Configuration: 
            BranchName: master
            RepositoryName: !GetAtt CodeCommitRepository.Name
          RunOrder: 1
          
      - Name: Build 
        Actions: 
        - Name: BuildAction 
          InputArtifacts: 
          - Name: m1-core-source-artifact 
          ActionTypeId: 
            Category: Build 
            Owner: AWS 
            Version: 1 
            Provider: CodeBuild
          OutputArtifacts: 
          - Name: m1-core-build-artifact 
          Configuration: 
            ProjectName: !Ref CodeBuildProject
          RunOrder: 1
          
      - Name: Deploy
        Actions: 
        - Name: DeployAction
          InputArtifacts: 
          - Name: m1-core-build-artifact 
          ActionTypeId: 
            Category: Deploy 
            Owner: AWS 
            Version: 1
            Provider: ECS 
          Configuration: 
            ClusterName: m1-core-cluster
            ServiceName: m1-core-service
            FileName: imagedefinitions.json 
          RunOrder: 1
            
      ArtifactStore: 
        Type: S3 
        Location: !Ref CoreArtifactsBucket


Outputs:

  CurrentRegion:
    Description: Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub ${AWS::StackName}:CurrentRegion
      
  CurrentAccount:
    Description: Account
    Value: !Ref AWS::AccountId
    Export:
      Name: !Sub ${AWS::StackName}:CurrentAccount
      
  ECSRole:
    Description: ECS Role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Sub ${AWS::StackName}:ECSRole
      
  ECSTaskRole:
    Description: ECS Task Role
    Value: !GetAtt 'ECSTaskRole.Arn'
    Export:
      Name: !Sub ${AWS::StackName}:ECSTaskRole
      
  VPCId:
    Description: VPC Id
    Value: !Ref 'VPC'
    Export:
      Name: !Sub ${AWS::StackName}:VPCId
      
  PublicSubnetOne:
    Description: Public Subnet One
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub ${AWS::StackName}:PublicSubnetOne
      
  PublicSubnetTwo:
    Description: Public Subnet Two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Sub ${AWS::StackName}:PublicSubnetTwo
      
  PrivateSubnetOne:
    Description: Private Subnet One
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Sub ${AWS::StackName}:PrivateSubnetOne
      
  PrivateSubnetTwo:
    Description: Private Subnet Two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Sub ${AWS::StackName}:PrivateSubnetTwo
      
  NATInstanceOne:
    Description: NAT Instance One
    Value: !Ref 'NATInstanceOne'
    Export:
      Name: !Sub ${AWS::StackName}:NATInstanceOne      

  NATInstanceTwo:
    Description: NAT Instance Two
    Value: !Ref 'NATInstanceTwo'
    Export:
      Name: !Sub ${AWS::StackName}:NATInstanceTwo  
      
  FargateContainerSecurityGroup:
    Description: Fargate Container Security Group
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Sub ${AWS::StackName}:FargateContainerSecurityGroup
      
  CodeBuildRole:
    Description: Codebuild Role ARN
    Value: !GetAtt 'CodeBuildRole.Arn'
    Export:
      Name: !Sub ${AWS::StackName}:CodeBuildRole
      
  CodePipelineRole:
    Description: Codepipeline Role ARN
    Value: !GetAtt 'CodePipelineRole.Arn'
    Export:
      Name: !Sub ${AWS::StackName}:CodePipelineRole
      
  # Test:
  #   Description: Test
  #   Value: !Sub https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepository.Name}
  #   Export:
  #     Name: Test