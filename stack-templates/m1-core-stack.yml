---
AWSTemplateFormatVersion: '2010-09-09'

Description: Core network and IAM resouces for M1 Project container service

Mappings:

  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'
      
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-core-vpc'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      
  # Subnets

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-public1-subnet'
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-public2-subnet'
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-private1-subnet'
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-private2-subnet'
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      
  # Routing

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-igw'
    
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-public-rt'
      VpcId: !Ref 'VPC'
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-fargate-sg'
      GroupName: m1-fargate-sg
      GroupDescription: Access to the Fargate containers from M1 VPC
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
        IpProtocol: -1
  
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: 
      - Key: Name
        Value: 'm1-nat-sg'
      GroupName: m1-nat-sg
      GroupDescription: Access to NAT Instances
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !GetAtt FargateContainerSecurityGroup.GroupId
        IpProtocol: -1
        
  # NAT Instances
  
  NATInstanceOne:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-public1-nat-instance'
      ImageId: ami-00a9d4a05375b2763
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetOne
        AssociatePublicIpAddress: true
        GroupSet: [!Ref NATSecurityGroup]
      SourceDestCheck: false

  NATInstanceTwo:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-public2-nat-instance'
      ImageId: ami-00a9d4a05375b2763
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetTwo
        AssociatePublicIpAddress: true
        GroupSet: [!Ref NATSecurityGroup]
      SourceDestCheck: false

        
  # Private Routing
  
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-private1-rt'
      VpcId: !Ref 'VPC'
  
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstanceOne
  
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
      
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: 'm1-private2-rt'
      VpcId: !Ref 'VPC'
  
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstanceTwo
  
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # VPC Endpoint - DynamoDB

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref 'PrivateRouteTableOne'
        - !Ref 'PrivateRouteTableTwo'
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref 'VPC'
      
  # IAM Roles

#   EcsServiceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Statement:
#         - Effect: Allow
#           Principal:
#             Service:
#             - ecs.amazonaws.com
#             - ecs-tasks.amazonaws.com
#           Action:
#           - sts:AssumeRole
#       Path: /
#       Policies:
#       - PolicyName: ecs-service
#         PolicyDocument:
#           Statement:
#           - Effect: Allow
#             Action:
#               # Rules which allow ECS to attach network interfaces to instances
#               # on your behalf in order for awsvpc networking mode to work right
#               - 'ec2:AttachNetworkInterface'
#               - 'ec2:CreateNetworkInterface'
#               - 'ec2:CreateNetworkInterfacePermission'
#               - 'ec2:DeleteNetworkInterface'
#               - 'ec2:DeleteNetworkInterfacePermission'
#               - 'ec2:Describe*'
#               - 'ec2:DetachNetworkInterface'

#               # Rules which allow ECS to update load balancers on your behalf
#               # with the information sabout how to send traffic to your containers
#               - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
#               - 'elasticloadbalancing:DeregisterTargets'
#               - 'elasticloadbalancing:Describe*'
#               - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
#               - 'elasticloadbalancing:RegisterTargets'

#               # Rules which allow ECS to run tasks that have IAM roles assigned to them.
#               - 'iam:PassRole'

#               # Rules that let ECS interact with container images.
#               - 'ecr:GetAuthorizationToken'
#               - 'ecr:BatchCheckLayerAvailability'
#               - 'ecr:GetDownloadUrlForLayer'
#               - 'ecr:BatchGetImage'

#               # Rules that let ECS create and push logs to CloudWatch.
#               - 'logs:DescribeLogStreams'
#               - 'logs:CreateLogStream'
#               - 'logs:CreateLogGroup'
#               - 'logs:PutLogEvents'

#             Resource: '*'

#   # This is a role which is used by the ECS tasks. Tasks in Amazon ECS define
#   # the containers that should be deployed togehter and the resources they
#   # require from a compute/memory perspective. So, the policies below will define
#   # the IAM permissions that our Mythical Mysfits docker containers will have.
#   # If you attempted to write any code for the Mythical Mysfits service that
#   # interacted with different AWS service APIs, these roles would need to include
#   # those as allowed actions.
#   ECSTaskRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Statement:
#         - Effect: Allow
#           Principal:
#             Service: [ecs-tasks.amazonaws.com]
#           Action: ['sts:AssumeRole']
#       Path: /
#       Policies:
#         - PolicyName: AmazonECSTaskRolePolicy
#           PolicyDocument:
#             Statement:
#             - Effect: Allow
#               Action:
#                 # Allow the ECS Tasks to download images from ECR
#                 - 'ecr:GetAuthorizationToken'
#                 - 'ecr:BatchCheckLayerAvailability'
#                 - 'ecr:GetDownloadUrlForLayer'
#                 - 'ecr:BatchGetImage'

#                 # Allow the ECS tasks to upload logs to CloudWatch
#                 - 'logs:CreateLogStream'
#                 - 'logs:CreateLogGroup'
#                 - 'logs:PutLogEvents'
#               Resource: '*'

#             - Effect: Allow
#               Action:
#                 # Allows the ECS tasks to interact with only the MysfitsTable
#                 # in DynamoDB
#                 - 'dynamodb:Scan'
#                 - 'dynamodb:Query'
#                 - 'dynamodb:UpdateItem'
#                 - 'dynamodb:GetItem'
#               Resource: 'arn:aws:dynamodb:*:*:table/MysfitsTable*'

#   # An IAM role that allows the AWS CodePipeline service to perform it's
#   # necessary actions. We have intentionally left permissions on this role
#   # that will not be used by the CodePipeline service during this workshop.
#   # This will allow you to more simply use CodePipeline in the future should
#   # you want to use the service for Pipelines that interact with different
#   # AWS services than the ones used in this workshop.
#   MythicalMysfitsServiceCodePipelineServiceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: MythicalMysfitsServiceCodePipelineServiceRole
#       AssumeRolePolicyDocument:
#         Statement:
#         - Effect: Allow
#           Principal:
#             Service:
#             - codepipeline.amazonaws.com
#           Action:
#           - sts:AssumeRole
#       Path: "/"
#       Policies:
#       - PolicyName: MythicalMysfitsService-codepipeline-service-policy
#         PolicyDocument:
#           Statement:
#           - Action:
#             - codecommit:GetBranch
#             - codecommit:GetCommit
#             - codecommit:UploadArchive
#             - codecommit:GetUploadArchiveStatus
#             - codecommit:CancelUploadArchive
#             Resource: "*"
#             Effect: Allow
#           - Action:
#             - s3:GetObject
#             - s3:GetObjectVersion
#             - s3:GetBucketVersioning
#             Resource: "*"
#             Effect: Allow
#           - Action:
#             - s3:PutObject
#             Resource:
#             - arn:aws:s3:::*
#             Effect: Allow
#           - Action:
#             - elasticloadbalancing:*
#             - autoscaling:*
#             - cloudwatch:*
#             - ecs:*
#             - codebuild:*
#             - iam:PassRole
#             Resource: "*"
#             Effect: Allow
#           Version: "2012-10-17"

#   # An IAM role that allows the AWS CodeBuild service to perform the actions
#   # required to complete a build of our source code retrieved from CodeCommit,
#   # and push the created image to ECR.
#   MythicalMysfitsServiceCodeBuildServiceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: MythicalMysfitsServiceCodeBuildServiceRole
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           Effect: Allow
#           Principal:
#             Service: codebuild.amazonaws.com
#           Action: sts:AssumeRole
#       Policies:
#       - PolicyName: "MythicalMysfitsService-CodeBuildServicePolicy"
#         PolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#           - Effect: "Allow"
#             Action:
#             - "codecommit:ListBranches"
#             - "codecommit:ListRepositories"
#             - "codecommit:BatchGetRepositories"
#             - "codecommit:Get*"
#             - "codecommit:GitPull"
#             Resource:
#             - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:MythicalMysfitsServiceRepository
#           - Effect: "Allow"
#             Action:
#             - "logs:CreateLogGroup"
#             - "logs:CreateLogStream"
#             - "logs:PutLogEvents"
#             Resource: "*"
#           - Effect: "Allow"
#             Action:
#             - "s3:PutObject"
#             - "s3:GetObject"
#             - "s3:GetObjectVersion"
#             - "s3:ListBucket"
#             Resource: "*"
#           - Effect: "Allow"
#             Action:
#             - "ecr:InitiateLayerUpload"
#             - "ecr:GetAuthorizationToken"
#             Resource: "*"


# # These are the values output by the CloudFormation template. Be careful
# # about changing any of them, because of them are exported with specific
# # names so that the other task related CF templates can use them.
# Outputs:
#   CurrentRegion:
#     Description: REPLACE_ME_REGION
#     Value: !Ref AWS::Region
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CurrentRegion' ] ]
#   CurrentAccount:
#     Description: REPLACE_ME_ACCOUNT_ID
#     Value: !Ref AWS::AccountId
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CurrentAccount' ] ]
#   EcsServiceRole:
#     Description: REPLACE_ME_ECS_SERVICE_ROLE_ARN
#     Value: !GetAtt 'EcsServiceRole.Arn'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EcsServiceRole' ] ]
#   ECSTaskRole:
#     Description: REPLACE_ME_ECS_TASK_ROLE_ARN
#     Value: !GetAtt 'ECSTaskRole.Arn'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskRole' ] ]
#   VPCId:
#     Description: REPLACE_ME_VPC_ID
#     Value: !Ref 'VPC'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
#   PublicSubnetOne:
#     Description: REPLACE_ME_PUBLIC_SUBNET_ONE
#     Value: !Ref 'PublicSubnetOne'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
#   PublicSubnetTwo:
#     Description: REPLACE_ME_PUBLIC_SUBNET_TWO
#     Value: !Ref 'PublicSubnetTwo'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
#   PrivateSubnetOne:
#     Description: REPLACE_ME_PRIVATE_SUBNET_ONE
#     Value: !Ref 'PrivateSubnetOne'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
#   PrivateSubnetTwo:
#     Description: REPLACE_ME_PRIVATE_SUBNET_TWO
#     Value: !Ref 'PrivateSubnetTwo'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]
#   FargateContainerSecurityGroup:
#     Description: REPLACE_ME_SECURITY_GROUP_ID
#     Value: !Ref 'FargateContainerSecurityGroup'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroup' ] ]
#   CodeBuildRole:
#     Description: REPLACE_ME_CODEBUILD_ROLE_ARN
#     Value: !GetAtt 'MythicalMysfitsServiceCodeBuildServiceRole.Arn'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'MythicalMysfitsServiceCodeBuildServiceRole' ] ]
#   CodePipelineRole:
#     Description: REPLACE_ME_CODEPIPELINE_ROLE_ARN
#     Value: !GetAtt 'MythicalMysfitsServiceCodePipelineServiceRole.Arn'
#     Export:
#       Name: !Join [ ':', [ !Ref 'AWS::StackName', 'MythicalMysfitsServiceCodePipelineServiceRole' ] ]
