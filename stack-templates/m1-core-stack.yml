AWSTemplateFormatVersion: 2010-09-09

Description: M1 Core Stack


Mappings:

  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
    PrivateOne:
      CIDR: 10.0.2.0/24
    PrivateTwo:
      CIDR: 10.0.3.0/24


Parameters:

  LatestLinuxAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    
  NATAMI:
    Type: String
    Default: ami-00a9d4a05375b2763


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags: 
      - Key: Name
        Value: m1-core-vpc
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
      - Key: Name
        Value: m1-igw
    
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
# Subnets

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: m1-public1-subnet
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicOne, CIDR]
      MapPublicIpOnLaunch: true
      
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: m1-public2-subnet
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicTwo, CIDR]
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: m1-private1-subnet
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PrivateOne, CIDR]
      
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
      - Key: Name
        Value: m1-private2-subnet
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PrivateTwo, CIDR]
      
# Routing

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
      - Key: Name
        Value: m1-public-rt
      VpcId: !Ref VPC
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

# Security Groups
  
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: 
      - Key: Name
        Value: m1-vpc-sg
      GroupName: m1-vpc-sg
      GroupDescription: Access to ECS Cluster from VPC range
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: !FindInMap [SubnetConfig, VPC, CIDR]
        IpProtocol: -1
  
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: 
      - Key: Name
        Value: m1-nat-sg
      GroupName: m1-nat-sg
      GroupDescription: Access to NAT Instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !GetAtt VPCSecurityGroup.GroupId
        IpProtocol: -1
        
# NAT Instances
  
  NATInstanceOne:
    Type: AWS::EC2::Instance
    DependsOn: PublicRoute
    Properties:
      Tags:
      - Key: Name
        Value: m1-public1-nat-instance
      ImageId: !Ref NATAMI
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: 0
        SubnetId: !Ref PublicSubnetOne
        AssociatePublicIpAddress: true
        GroupSet:
        - !Ref NATSecurityGroup
      SourceDestCheck: false

  NATInstanceTwo:
    Type: AWS::EC2::Instance
    DependsOn: PublicRoute
    Properties:
      Tags:
      - Key: Name
        Value: m1-public2-nat-instance
      ImageId: !Ref NATAMI
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: 0
        SubnetId: !Ref PublicSubnetTwo
        AssociatePublicIpAddress: true
        GroupSet:
        - !Ref NATSecurityGroup
      SourceDestCheck: false
  
  # NATInstanceOne:
  #   Type: AWS::EC2::Instance
  #   DependsOn: PublicRoute
  #   Properties:
  #     Tags:
  #     - Key: Name
  #       Value: m1-public1-nat-instance
  #     ImageId: !Ref LatestLinuxAMI
  #     InstanceType: t2.micro
  #     NetworkInterfaces:
  #     - DeviceIndex: 0
  #       SubnetId: !Ref PublicSubnetOne
  #       AssociatePublicIpAddress: true
  #       GroupSet:
  #       - !Ref NATSecurityGroup
  #     SourceDestCheck: false
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         yum -y update
  #         yum install -y aws-cfn-bootstrap
  #         echo 1 > /proc/sys/net/ipv4/ip_forward
  #         echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
  #         /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
  #         /sbin/iptables-save > /etc/sysconfig/iptables
  #         mkdir -p /etc/sysctl.d/
  #         cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
  #         net.ipv4.ip_forward = 1
  #         net.ipv4.conf.eth0.send_redirects = 0
  #         NatConfFileMarker
  #         /opt/aws/bin/cfn-signal -e 0 --resource NATInstanceOne --stack ${AWS::StackName} --region ${AWS::Region}
  #   CreationPolicy:
  #     ResourceSignal:
  #       Count: 1
  #       Timeout: PT5M

  # NATInstanceTwo:
  #   Type: AWS::EC2::Instance
  #   DependsOn: PublicRoute
  #   Properties:
  #     Tags:
  #     - Key: Name
  #       Value: m1-public2-nat-instance
  #     ImageId: !Ref LatestLinuxAMI
  #     InstanceType: t2.micro
  #     NetworkInterfaces:
  #     - DeviceIndex: 0
  #       SubnetId: !Ref PublicSubnetTwo
  #       AssociatePublicIpAddress: true
  #       GroupSet:
  #       - !Ref NATSecurityGroup
  #     SourceDestCheck: false
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         yum -y update
  #         yum install -y aws-cfn-bootstrap
  #         echo 1 > /proc/sys/net/ipv4/ip_forward
  #         echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
  #         /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
  #         /sbin/iptables-save > /etc/sysconfig/iptables
  #         mkdir -p /etc/sysctl.d/
  #         cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
  #         net.ipv4.ip_forward = 1
  #         net.ipv4.conf.eth0.send_redirects = 0
  #         NatConfFileMarker
  #         /opt/aws/bin/cfn-signal -e 0 --resource NATInstanceTwo --stack ${AWS::StackName} --region ${AWS::Region}
  #   CreationPolicy:
  #     ResourceSignal:
  #       Count: 1
  #       Timeout: PT5M
        
# Private Routing
  
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: m1-private1-rt
      VpcId: !Ref VPC
  
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstanceOne
  
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
      
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: m1-private2-rt
      VpcId: !Ref VPC
  
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstanceTwo
  
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

# Load Balancer
  
  CoreLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: m1-core-nlb
      Scheme: internal
      Type: network
      Subnets:
      - !Ref PrivateSubnetOne
      - !Ref PrivateSubnetTwo

  CoreTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: m1-core-targetgroup
      Port: 8080
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  CoreListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref CoreLoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref CoreTargetGroup
      Port: 80
      Protocol: TCP


Outputs:

  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}:VPC
      
  VPCSecurityGroup:
    Value: !Ref VPCSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}:VPCSecurityGroup
      
  CoreTargetGroup:
    Value: !Ref CoreTargetGroup
    Export:
      Name: !Sub ${AWS::StackName}:CoreTargetGroup
      
  PrivateSubnetOne:
    Value: !Ref PrivateSubnetOne
    Export:
      Name: !Sub ${AWS::StackName}:PrivateSubnetOne
      
  PrivateSubnetTwo:
    Value: !Ref PrivateSubnetTwo
    Export:
      Name: !Sub ${AWS::StackName}:PrivateSubnetTwo
      
  NATInstanceOne:
    Value: !Ref NATInstanceOne
    Export:
      Name: !Sub ${AWS::StackName}:NATInstanceOne      

  NATInstanceTwo:
    Value: !Ref NATInstanceTwo
    Export:
      Name: !Sub ${AWS::StackName}:NATInstanceTwo
      
  CoreLoadBalancer:
    Value: !Ref CoreLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}:CoreLoadBalancer
      
  CoreLoadBalancerDNSName:
    Value: !GetAtt CoreLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}:CoreLoadBalancerDNSName
      
  PrivateRouteTableOne:
    Value: !Ref PrivateRouteTableOne
    Export:
      Name: !Sub ${AWS::StackName}:PrivateRouteTableOne      

  PrivateRouteTableTwo:
    Value: !Ref PrivateRouteTableTwo
    Export:
      Name: !Sub ${AWS::StackName}:PrivateRouteTableTwo   
  
  Test:
    Description: Test
    Value: !Ref LatestLinuxAMI
    Export:
      Name: Test