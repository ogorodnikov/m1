AWSTemplateFormatVersion: 2010-09-09

Description: M1 ECS Cluster Stack


Parameters:

  KeyPair:
    Type: String
    Default: m1-key
    
  LatestECSOptimizedAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  CreateAWSServiceRoleForECS:
    Type: String
    Default: true
    
    
Conditions:

  CreateAWSServiceRoleForECS: !Not [!Equals [!Ref CreateAWSServiceRoleForECS, true]]
  

Resources:

  CoreLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: m1-core-log-group
      
  CoreImageRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: m1-core-image
      
  CoreCluster:
    Type: AWS::ECS::Cluster
    # DependsOn: CoreListener
    Properties:
      ClusterName: m1-core-cluster
      
# Roles
      
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
      - Key: Name
        Value: m1-ecs-role
      RoleName: m1-ecs-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: m1-ecs-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            # Network Interface actions for awsvpc networking mode
            - ec2:AttachNetworkInterface
            - ec2:CreateNetworkInterface
            - ec2:CreateNetworkInterfacePermission
            - ec2:DeleteNetworkInterface
            - ec2:DeleteNetworkInterfacePermission
            - ec2:Describe*
            - ec2:DetachNetworkInterface
            # ELB
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            # Allow ECS to run tasks that have IAM roles assigned to them
            - iam:PassRole
            # Allow ECS interact with container images
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            # Allow ECS create and push logs to CloudWatch
            - logs:DescribeLogStreams
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
      - Key: Name
        Value: m1-ecs-task-role
      RoleName: m1-ecs-task-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: m1-ecs-task-policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              # Allow ECS Tasks to download images from ECR
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              # Allow ECS tasks to upload logs to CloudWatch
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              # Cognito
              - cognito-idp:ListUsers
              - cognito-idp:ListUserPools
              - cognito-idp:ListUserPoolClients
              - cognito-idp:AdminConfirmSignUp
              # ELB
              - elasticloadbalancing:DescribeLoadBalancers
              Resource: '*'
            - Effect: Allow
              Action:
              # Allows ECS tasks to interact with particular DynamoDB table
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:BatchWriteItem
              Resource: arn:aws:dynamodb:*:*:table/m1-algorithms-table*
              
  ECSServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Condition: CreateAWSServiceRoleForECS
    Properties:
      AWSServiceName: ecs.amazonaws.com
      
  CoreContainerEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: m1-core-container-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      # - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
      # - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  
  CoreContainerEC2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
      - !Ref CoreContainerEC2Role              
  
# Fargate
      
  CoreFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: m1-core-fargate-task-definition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSRole
      ContainerDefinitions:
      - Name: m1-core-image
        PortMappings: 
        - ContainerPort: 8080
          Protocol: http
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${CoreImageRepository}:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CoreLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: m1-core-fargate
        Essential: true

  CoreFargateService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: m1-core-fargate-service
      Cluster: !Ref CoreCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 300
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: true
          Rollback: true
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !ImportValue m1-core-stack:VPCSecurityGroup
          Subnets:
          - !ImportValue m1-core-stack:PrivateSubnetOne
          - !ImportValue m1-core-stack:PrivateSubnetTwo
      TaskDefinition: !Ref CoreFargateTaskDefinition
      LoadBalancers:
      - ContainerName: m1-core-image
        ContainerPort: 8080
        TargetGroupArn: !ImportValue m1-core-stack:CoreTargetGroup
        
# Container EC2
  
  CoreContainerEC2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: m1-core-container-ec2-task-definition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - EC2
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSRole
      ContainerDefinitions:
      - Name: m1-core-image
        PortMappings: 
        - ContainerPort: 8080
          Protocol: http
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${CoreImageRepository}:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CoreLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: m1-core-container-ec2
        Essential: true
        
  CoreContainerEC2Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: m1-core-container-ec2-service
      Cluster: !Ref CoreCluster
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 300
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: true
          Rollback: true
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !ImportValue m1-core-stack:VPCSecurityGroup
          Subnets:
          - !ImportValue m1-core-stack:PrivateSubnetOne
          - !ImportValue m1-core-stack:PrivateSubnetTwo
      TaskDefinition: !Ref CoreContainerEC2TaskDefinition
      LoadBalancers:
      - ContainerName: m1-core-image
        ContainerPort: 8080
        TargetGroupArn: !ImportValue m1-core-stack:CoreTargetGroup

  # CoreContainerEC2Instance:
  #   Type: AWS::EC2::Instance
  #   # DependsOn: GatewayAttachement
  #   Properties:
  #     Tags:
  #     - Key: Name
  #       Value: m1-core-container-ec2-instance
  #     ImageId: !Ref LatestECSOptimizedAMI
  #     IamInstanceProfile: !Ref CoreContainerEC2RoleInstanceProfile
  #     InstanceType: t2.micro
  #     KeyName: !Ref KeyPair
  #     NetworkInterfaces:
  #     - DeviceIndex: 0
  #       SubnetId: !ImportValue m1-core-stack:PrivateSubnetOne
  #       AssociatePublicIpAddress: false
  #       GroupSet: 
  #       - !ImportValue m1-core-stack:VPCSecurityGroup
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         echo ECS_CLUSTER=${CoreCluster} >> /etc/ecs/ecs.config
  #         echo ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE=true >> /etc/ecs/ecs.config
          
  #         # echo ECS_ENABLE_TASK_ENI=true >> /etc/ecs/ecs.config
          
  #         # mkdir /home/ec2-user/.aws/ && touch /home/ec2-user/.aws/config
  #         # echo [default] > /home/ec2-user/.aws/config
  #         # echo role_arn = arn:aws:iam::196332284574:role/m1-ecs-task-role >> /home/ec2-user/.aws/config
  #         # echo credential_source = EcsContainer >> /home/ec2-user/.aws/config  


Outputs:
 
  CoreLogGroup:
    Description: Core LogGroup
    Value: !Ref CoreLogGroup
    Export:
      Name: !Sub ${AWS::StackName}:CoreLogGroup
      
  CoreCluster:
    Description: Core Cluster
    Value: !Ref CoreCluster
    Export:
      Name: !Sub ${AWS::StackName}:CoreCluster      
      
  CoreFargateServiceName:
    Description: Core Fargate Service Name
    Value: !GetAtt CoreFargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}:CoreFargateServiceName
      
  # CoreContainerEC2Instance:
  #   Description: EC2 Instance to host M1 Core container in ECS
  #   Value: !Ref CoreContainerEC2Instance
  #   Export:
  #     Name: !Sub ${AWS::StackName}:CoreContainerEC2Instance  
      
  # CodeRepositoryURL:
  #   Description: HTTPS Clone URL for CodeCommit Repository 
  #   Value: !GetAtt CodeCommitRepository.CloneUrlHttp
  #   Export:
  #     Name: !Sub ${AWS::StackName}:CodeRepositoryURL
      
  # Test:
  #   Description: Test
  #   Value: 
  #     !Sub 
  #       - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${core_image_repository}:latest
  #       - core_image_repository: !ImportValue m1-cicd-stack:UserPool