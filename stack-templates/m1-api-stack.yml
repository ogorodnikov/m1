AWSTemplateFormatVersion: 2010-09-09

Description: M1 API Stack

Resources:

# API VPC Link
      
  APIGatewayVPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: m1-api-vpc-link
      TargetArns: 
      - !ImportValue m1-core-stack:CoreLoadBalancer


# API Domain and mapping to Stage

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: m1.ogoro.me
      EndpointConfiguration:
        Types: [REGIONAL]
      RegionalCertificateArn: !Ref Certificate
      SecurityPolicy: TLS_1_2
      
  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Ref APIDomainName
      RestApiId: !Ref RESTAPI
      Stage: m1-api-stage-prod


# Route53
  
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: ogoro.me
      HostedZoneConfig: 
        Comment: 'M1 hosted zone'

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
      
      - Name: ogoro.me.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magical AWS Hosted Zone for all Cloudfront Distributions
          DNSName: dxx9yo8k7j76i.cloudfront.net.
          # >>>> Static site ogoro.me CloudFront
          # DNSName: !GetAtt 
          # DNSName: !GetAtt CFDistribution.DomainName
          
      - Name: www.ogoro.me.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magical AWS Hosted Zone for all Cloudfront Distributions
          DNSName: dxx9yo8k7j76i.cloudfront.net.
          # >>>> Static site ogoro.me CloudFront
          # DNSName: !GetAtt 
          # DNSName: !GetAtt CFDistribution.DomainName
          
      - Name: m1.ogoro.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
          DNSName: !GetAtt APIDomainName.RegionalDomainName
          
      - Name: www.m1.ogoro.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
          DNSName: !GetAtt APIDomainName.RegionalDomainName
          
  
# Certificate

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: ogoro.me
      SubjectAlternativeNames: ['*.ogoro.me']
      # SubjectAlternativeNames: ['*.ogoro.me', '*.m1.ogoro.me']
      ValidationMethod: DNS
      DomainValidationOptions: 
      - DomainName: ogoro.me
        HostedZoneId: !Ref HostedZone
        
        
# CloudFront

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig:
      
        Comment: Distribution for S3 Static Site ogoro.me
        Aliases: ['ogoro.me', 'www.ogoro.me']
        Enabled: true

        CacheBehaviors: 
        - TargetOriginId: S3-ogoro-me
          ViewerProtocolPolicy: redirect-to-https
          
        Origins: 
        - DomainName: ogoro.me.s3-website-us-east-1.amazonaws.com
          Id: S3-ogoro-me
          # CustomOriginConfig: 
          
        ViewerCertificate: 
          AcmCertificateArn: !Ref Certificate
          CloudFrontDefaultCertificate: false

          MinimumProtocolVersion: String
          SslSupportMethod: String


        


# API

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref RESTAPI
      StageName: m1-api-stage-prod
      
  RESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: m1-api
      EndpointConfiguration: 
        Types: 
        - REGIONAL
      FailOnWarnings: true
      Body: 
        
        swagger: 2.0
        info:
          title: m1-api
        securityDefinitions:
          m1-user-pool-authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: COGNITO_USER_POOLS
              providerARNs: 
              - !Sub
                - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userpool}
                - userpool: !ImportValue m1-cognito-stack:UserPool
        
        paths:
        
          /login:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/login', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                # requestParameters:
                #   method.request.querystring.next
            
            post:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/login', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

          /logout:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/logout', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                # requestParameters:
                #   method.request.querystring.next          


###   Algorithms   ###

          /:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
          /home:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/home', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
          
          /algorithms:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      

          /algorithms/{algorithm-id}:
          
            get:
            
              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                      

          /algorithms/{algorithm-id}/like:
          
            get:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/like', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id


          /algorithms/{algorithm-id}/run:
          
            post:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/run', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                  # method.request.body: method.request.body
                  
            options: 
              summary: CORS support
              description: Enable CORS by returning correct headers
              consumes:
              - application/json
              produces:
              - application/json
              tags:
              - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{}\n"
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string


Outputs:

  NameServers:
    Description: Name Servers
    Value: !Join ['; ', !GetAtt HostedZone.NameServers]
    Export:
      Name: !Sub ${AWS::StackName}:NameServers

  # Test:
  #   Description: Test API Export
  #   Value: !Sub 
  #   - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userpool}
  #   - userpool: !ImportValue m1-cognito-stack:UserPool
  #   Export:
  #     Name: TestAPIExport