AWSTemplateFormatVersion: 2010-09-09

Description: M1 API Stack

Resources:

# API VPC Link
      
  APIGatewayVPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: m1-api-vpc-link
      TargetArns: 
      - !ImportValue m1-core-stack:CoreLoadBalancer

# API Domain

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: m1.ogoro.me
      EndpointConfiguration:
        Types: [REGIONAL]
      RegionalCertificateArn: !ImportValue m1-dns-stack:Certificate
      SecurityPolicy: TLS_1_2
      
# Records

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue m1-dns-stack:HostedZoneId
      RecordSets:
      
      - Name: m1.ogoro.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
          DNSName: !GetAtt APIDomainName.RegionalDomainName
          
      - Name: www.m1.ogoro.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
          DNSName: !GetAtt APIDomainName.RegionalDomainName

# Mapping to stage
      
  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Ref APIDomainName
      RestApiId: !Ref RESTAPI
      Stage: m1-api-stage-prod

# Stage

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref RESTAPI
      StageName: m1-api-stage-prod

# REST API
      
  RESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: m1-api
      EndpointConfiguration: 
        Types: 
        - REGIONAL
      FailOnWarnings: true
      Body: 
        
        swagger: 2.0
        info:
          title: m1-api
        # securityDefinitions:
        #   m1-user-pool-authorizer:
        #     type: apiKey
        #     name: Authorization
        #     in: header
        #     x-amazon-apigateway-authtype: cognito_user_pools
        #     x-amazon-apigateway-authorizer:
        #       type: COGNITO_USER_POOLS
        #       providerARNs: 
        #       - !Sub
        #         - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userpool}
        #         - userpool: !ImportValue m1-cognito-stack:UserPool
        
        paths:
        
          /login:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/login', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                # requestParameters:
                #   method.request.querystring.next
            
            post:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/login', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

          /logout:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/logout', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                # requestParameters:
                #   method.request.querystring.next          


###   Algorithms   ###

          /:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
          /home:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/home', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
          
          /algorithms:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      

          /algorithms/{algorithm-id}:
          
            get:
            
              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                      

          /algorithms/{algorithm-id}/like:
          
            get:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/like', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id


          /algorithms/{algorithm-id}/run:
          
            post:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/run', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                  # method.request.body: method.request.body


          /algorithms/{algorithm-id}/state:
          
            get:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/state', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                  
          /tasks:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/tasks', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

          /download:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/download', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

          /admin:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/admin', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"   
          
            post:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/admin', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"   
                      
                      
            # options: 
            #   summary: CORS support
            #   description: Enable CORS by returning correct headers
            #   consumes:
            #   - application/json
            #   produces:
            #   - application/json
            #   tags:
            #   - CORS
            #   x-amazon-apigateway-integration:
            #     type: mock
            #     requestTemplates:
            #       application/json: "{\n  \"statusCode\" : 200\n}\n"
            #     responses:
            #       default:
            #         statusCode: 200
            #         responseParameters:
            #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            #           method.response.header.Access-Control-Allow-Methods: "'*'"
            #           method.response.header.Access-Control-Allow-Origin: "'*'"
            #         responseTemplates:
            #           application/json: "{}\n"
            #   responses:
            #     "200":
            #       description: Default response for CORS method
            #       headers:
            #         Access-Control-Allow-Headers:
            #           type: string
            #         Access-Control-Allow-Methods:
            #           type: string
            #         Access-Control-Allow-Origin:
            #           type: string

# Outputs:

#   APIDomainNameRegionalHostedZoneId:
#     Description: API Domain Name Regional Hosted Zone Id
#     Value: !GetAtt APIDomainName.RegionalHostedZoneId
#     Export:
#       Name: !Sub ${AWS::StackName}:APIDomainNameRegionalHostedZoneId

#   APIDomainNameRegionalDomainName:
#     Description: API Domain Name Regional Domain Name
#     Value: !GetAtt APIDomainName.RegionalDomainName
#     Export:
#       Name: !Sub ${AWS::StackName}:APIDomainNameRegionalDomainName