AWSTemplateFormatVersion: 2010-09-09

Description: M1 API Stack

Resources:

# Cognito

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: m1-user-pool
      # AutoVerifiedAttributes:
      # - email
      
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
          RequireLowercase: False
  
  UserPoolClient:  
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: m1-user-pool-client
      UserPoolId: !Ref UserPool
      
      ExplicitAuthFlows: 
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH

# API VPC Link
      
  APIGatewayVPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: m1-api-vpc-link
      TargetArns: 
      - !ImportValue m1-core-stack:CoreLoadBalancer
      
# API Domain and mapping to Stage

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: m1.ogoro.me
      EndpointConfiguration:
        Types: [REGIONAL]
      # >>>> Certificate
      RegionalCertificateArn: "arn:aws:acm:us-east-1:196332284574:certificate/dcf2f76d-b040-4013-993f-8a8d9d96767b"
      SecurityPolicy: TLS_1_2
      
  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Ref APIDomainName
      RestApiId: !Ref RESTAPI
      Stage: m1-api-stage-prod
      
# Route53
  
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: test.ogoro.me
      HostedZoneConfig: 
        Comment: 'M1 hosted zone'

  # RecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: !Ref HostedZone
  #     Name: test.ogoro.me.
  #     Type: A
  #     AliasTarget:
  #       DNSName: dxx9yo8k7j76i.cloudfront.net.
  #       # Magical AWS Hosted Zone for all Cloudfront Distributions
  #       HostedZoneId: Z2FDTNDATAQYW2 
        
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
      
      - Name: test.ogoro.me.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magical AWS Hosted Zone for all Cloudfront Distributions
          DNSName: dxx9yo8k7j76i.cloudfront.net.
          # >>>> Static site ogoro.me CloudFront
          # DNSName: !GetAtt 
          # DNSName: !GetAtt CFDistribution.DomainName
          
      - Name: www.test.ogoro.me.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magical AWS Hosted Zone for all Cloudfront Distributions
          DNSName: dxx9yo8k7j76i.cloudfront.net.
          # >>>> Static site ogoro.me CloudFront
          # DNSName: !GetAtt 
          # DNSName: !GetAtt CFDistribution.DomainName
          
      - Name: m1.test.ogoro.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
          DNSName: !GetAtt APIDomainName.RegionalDomainName
          
      - Name: www.m1.test.ogoro.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
          DNSName: !GetAtt APIDomainName.RegionalDomainName
          
      

# API

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref RESTAPI
      StageName: m1-api-stage-prod
      
  RESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: m1-api
      EndpointConfiguration: 
        Types: 
        - REGIONAL
      FailOnWarnings: true
      Body: 
        
        swagger: 2.0
        info:
          title: m1-api
        securityDefinitions:
          m1-user-pool-authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: COGNITO_USER_POOLS
              providerARNs:
              - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
        
        paths:
        
          /login:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/login', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                # requestParameters:
                #   method.request.querystring.next
            
            post:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/login', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

          /logout:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/logout', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                # requestParameters:
                #   method.request.querystring.next          


###   Algorithms   ###

          /:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
          /home:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri:  !Sub ['http://${nlb}/home', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
          
          /algorithms:
          
            get:
            
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      

          /algorithms/{algorithm-id}:
          
            get:
            
              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                      

          /algorithms/{algorithm-id}/like:
          
            get:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: GET
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/like', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id


          /algorithms/{algorithm-id}/run:
          
            post:

              parameters:
              - name: algorithm-id
                in: path
                required: true
                type: string
                
              # security:
              # - m1-user-pool-authorizer: []
                
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                      
              x-amazon-apigateway-integration:
                connectionType: VPC_LINK
                connectionId: !Ref APIGatewayVPCLink
                httpMethod: POST
                type: HTTP_PROXY
                uri: !Sub ['http://${nlb}/algorithms/{algorithm-id}/run', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
                responses: 
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      
                requestParameters:
                  integration.request.path.algorithm-id: method.request.path.algorithm-id
                  # method.request.body: method.request.body
                  
            # options: 
            #   summary: CORS support
            #   description: Enable CORS by returning correct headers
            #   consumes:
            #   - application/json
            #   produces:
            #   - application/json
            #   tags:
            #   - CORS
            #   x-amazon-apigateway-integration:
            #     type: mock
            #     requestTemplates:
            #       application/json: "{\n  \"statusCode\" : 200\n}\n"
            #     responses:
            #       default:
            #         statusCode: 200
            #         responseParameters:
            #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            #           method.response.header.Access-Control-Allow-Methods: "'*'"
            #           method.response.header.Access-Control-Allow-Origin: "'*'"
            #         responseTemplates:
            #           application/json: "{}\n"
            #   responses:
            #     "200":
            #       description: Default response for CORS method
            #       headers:
            #         Access-Control-Allow-Headers:
            #           type: string
            #         Access-Control-Allow-Methods:
            #           type: string
            #         Access-Control-Allow-Origin:
            #           type: string


# Outputs:

  # NameServers:
  #   Description: Name Servers
  #   Value: !Join ['; ', !GetAtt HostedZone.NameServers]
  #   Export:
  #     Name: !Sub ${AWS::StackName}:NameServers

  # Test:
  #   Description: Test API Export
  #   Value: !Sub ['http://${nlb}/home', nlb: !ImportValue m1-core-stack:CoreLoadBalancerDNSName]
  #   Export:
  #     Name: TestAPIExport